package chat

import (
	"time"

	"github.com/google/uuid"

	"bytechat/internal/database"
	"strconv"
)

// ChatMessageData holds data for rendering a single chat message.
type ChatMessageData struct {
	Text          string     `json:"text"`
	Sender        SenderInfo `json:"sender"`
	Timestamp     time.Time  `json:"timestamp"`
	IsCurrentUser bool       `json:"isCurrentUser"`
}

// SenderInfo holds minimal sender details.
type SenderInfo struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Status    string    `json:"status"`
}

// ChatPageData holds necessary data for rendering the chat page.
type ChatPageData struct {
	RoomID          uuid.UUID
	RoomName        string
	RoomType        string
	InitialMessages []database.ListMessagesByRoomRow
	CurrentUserID   uuid.UUID
}

// templ ChatMessage renders a single chat message using templ standard conditional classes.
templ ChatMessage(data ChatMessageData) {
	<div
		class={ templ.Classes(
			"p-2",
			"rounded-lg",
			"mb-2",
			templ.KV("bg-blue-100", data.IsCurrentUser),
			templ.KV("self-end", data.IsCurrentUser),
			templ.KV("bg-gray-200", !data.IsCurrentUser),
			templ.KV("self-start", !data.IsCurrentUser),
		) }
		style="max-width: 75%;"
		data-sender-id={ data.Sender.ID.String() }
	>
		if !data.IsCurrentUser {
			<section class="flex items-center gap-2">
				<a
					class="text-xs font-semibold text-gray-600 hover:cursor-pointer hover:underline"
					href={ templ.SafeURL("/chat/dm/" + data.Sender.ID.String() + "?" + "room_name=" + data.Sender.FirstName + "" + data.Sender.LastName) }
				>
					{ data.Sender.FirstName } { data.Sender.LastName }
				</a>
				if data.Sender.Status == "online" {
					<span class="flex w-3 h-3 me-3 bg-teal-500 rounded-full"></span>
				} else if data.Sender.Status == "offline" {
					<span class="flex w-3 h-3 me-3 bg-red-500 rounded-full"></span>
				}
			</section>
		}
		<p class="text-sm text-gray-800">{ data.Text }</p>
		if data.Timestamp.Format(time.DateOnly) >= time.Now().Format(time.DateOnly) {
			<div class="text-xs text-gray-500 text-right">{ data.Timestamp.Format(time.TimeOnly) }</div>
		} else {
			<div class="text-xs text-gray-500 text-right">{ data.Timestamp.Format(time.DateTime) }</div>
		}
	</div>
}

// templ ChatPage renders the main chat page.
templ ChatPage(data ChatPageData) {
	<main class="md:flex md:flex-row md:gap-3 md:flex-nowrap">
		<section
			class="grow flex flex-col h-[calc(100vh-6rem)] "
			hx-ext="ws"
			ws-connect={ "/chat/ws/" + data.RoomID.String() }
			hx-swap="beforeend"
			hx-target="#chat-messages"
		>
			<header class="p-2 border-b border-gray-200">
				<h2 class="text-lg font-semibold text-center mx-auto">
					{ data.RoomName }
				</h2>
				<span id="currentUserInfo" data-user-id={ data.CurrentUserID.String() } class="hidden"></span>
			</header>
			<div id="chat-messages" class="flex-1 overflow-y-auto overscroll-none p-4 space-y-2 flex flex-col">
				for _, msg := range data.InitialMessages {
					@ChatMessage(ChatMessageData{
						Text: msg.Text.String,
						Sender: SenderInfo{
							ID:        msg.UserID,
							FirstName: msg.FirstName,
							LastName:  msg.LastName,
							Status:    msg.Status,
						},
						Timestamp:     msg.CreatedAt.Time,
						IsCurrentUser: msg.UserID == data.CurrentUserID,
					})
				}
				<div id="message-bottom"></div>
			</div>
			<form
				id="chat-form"
				class="p-4 border-t border-gray-200 rounded-md"
				ws-send
			>
				<div class="flex items-center">
					<input
						id="message-input"
						type="text"
						name="text"
						placeholder="Type your message..."
						required
						class="flex-1 border border-gray-300 rounded-l-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
						autocomplete="off"
					/>
					<button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-r-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 hover:cursor-pointer">
						Send
					</button>
				</div>
			</form>
			<script>
         (function() {
             const chatMessagesDiv = document.getElementById('chat-messages');
             const messageBottomDiv = document.getElementById('message-bottom');
             const chatForm = document.getElementById('chat-form');
             const messageInput = document.getElementById('message-input');
             const currentUserInfo = document.getElementById('currentUserInfo');
             const currentUserID = currentUserInfo ? currentUserInfo.getAttribute('data-user-id') : null;

             function scrollToBottom() {
                 const scrollThreshold = 50; // Pixels from bottom
                 const isScrolledNearBottom = chatMessagesDiv.scrollHeight - chatMessagesDiv.scrollTop - chatMessagesDiv.clientHeight < scrollThreshold;

                 if (messageBottomDiv && isScrolledNearBottom) {
                    messageBottomDiv.scrollIntoView({ behavior: "smooth", block: "end" });
                 } else if (chatMessagesDiv && isScrolledNearBottom) {
                    chatMessagesDiv.scrollTo({ top: chatMessagesDiv.scrollHeight, behavior: 'smooth' });
                 }
             }


             function adjustMessageStyle(messageElement) {
                 if (!currentUserID || !messageElement || !messageElement.hasAttribute('data-sender-id')) {
                     return;
                 }

                 const senderId = messageElement.getAttribute('data-sender-id');
                 const senderNameDiv = messageElement.querySelector('.sender-name');

                 messageElement.classList.remove('bg-gray-200', 'self-start', 'bg-blue-100', 'self-end');

                 if (senderId === currentUserID) {
                     messageElement.classList.add('bg-blue-100', 'self-end');
                     if (senderNameDiv) {
                         senderNameDiv.style.display = 'none';
                     }
                 } else {
                     messageElement.classList.add('bg-gray-200', 'self-start');
                     if (senderNameDiv) {
                         senderNameDiv.style.display = 'block';
                     }
                 }
             }

             scrollToBottom();
             if (chatMessagesDiv) {
                 chatMessagesDiv.querySelectorAll('div[data-sender-id]').forEach(adjustMessageStyle);
             }

             const observer = new MutationObserver((mutationsList) => {
                 let needsScroll = false;
                 for (const mutation of mutationsList) {
                     if (mutation.type === 'childList') {
                         mutation.addedNodes.forEach(node => {
                             if (node.nodeType === Node.ELEMENT_NODE) {
                                 if (node.matches && node.matches('div[data-sender-id]')) {
                                     adjustMessageStyle(node);
                                     needsScroll = true;
                                 }
                                 else {
                                     const message = node.querySelector('div[data-sender-id]');
                                     if(message) {
                                         adjustMessageStyle(message);
                                         needsScroll = true;
                                     }
                                 }
                             }
                         });
                     }
                 }
                 if (needsScroll) {
                     scrollToBottom();
                 }
             });

             if (chatMessagesDiv) {
                 observer.observe(chatMessagesDiv, { childList: true, subtree: true });
             }

            if (chatForm) {
                 chatForm.addEventListener('htmx:wsAfterSend', function(evt) {
                    if (messageInput) {
                        messageInput.value = '';
                        messageInput.focus();
                    }
                 });

                 chatForm.addEventListener('htmx:wsError', function(evt) {
                    console.error("WebSocket send error:", evt.detail.error);
                 });
            	}
        	 })();
    	  </script>
		</section>
		if data.RoomType == "public" {
			<section
				id="room-members"
				hx-get={ "/chat/" + data.RoomID.String() + "/members" }
				hx-trigger="load"
				hx-swap="outerHTML"
			>
				Loading...
			</section>
		}
	</main>
}

// RoomMembers renders latest room members
templ RoomMembers(currentUserID uuid.UUID, members []database.GetUsersInRoomRow) {
	<ul class="bg-teal-900 text-white hidden md:block shadow p-2 rounded-md overflow-y-auto overscroll-none">
		<header class="capitalize font-bold text-center">
			<p>Members ({ strconv.Itoa(len(members)) })</p>
		</header>
		<hr/>
		for _, member := range members {
			<li
				class="flex gap-2 items-center p-1"
			>
				if member.UserID != currentUserID {
					<a
						class="font-semibold hover:cursor-pointer hover:underline"
						href={ templ.SafeURL("/chat/" + member.UserID.String() + "?" + "room_name=" + member.FullName.(string)) }
					>
						{ member.FullName.(string) }
					</a>
					if member.Status == "online" {
						<span class="text-xs italic">online</span>
					} else {
						<p class="text-xs italic">Last Seen: { member.UpdatedAt.Time.Format(time.DateTime) }</p>
					}
				} else {
					<p class="font-semibold">{ member.FullName.(string) } </p>
				}
			</li>
		}
	</ul>
}
